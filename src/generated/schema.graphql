### This file was autogenerated by GraphQL Nexus
### Do not make changes to this file directly


type Association {
  additionalProperties: String
  associationType: AssociationType!
  createdAt: DateTime!
  entityId: String!
  entityType: EntityType!
  id: String!
  type: String!
  updatedAt: DateTime!
}

"""Indicates the nature of association between instructional entities."""
enum AssociationType {
  ExactMatchOf
  Exemplar
  HasSkillLevel
  IsChildOf
  IsParentOf
  IsPartOf
  IsPeerOf
  IsRelatedTo
  Precedes
  ReplacedBy
}

input AssociationWhereUniqueInput {
  id: String
}

"""
Indicates instructional level of the entity based on Blooms Taxonomy(revised)
"""
enum BloomLevel {
  ANALYZE
  APPLY
  CREATE
  EVALUATE
  INFO
  REMEMBER
  UNDERSTAND
}

type Certificate {
  additionalProperties: String
  alternativeLabel: String
  areaOfStudy: String
  associatedPersonnel(after: PersonWhereUniqueInput, before: PersonWhereUniqueInput, first: Int, last: Int, skip: Int): [Person!]!
  associations(after: AssociationWhereUniqueInput, before: AssociationWhereUniqueInput, first: Int, last: Int, skip: Int): [Association!]!
  createdAt: DateTime!
  defaultCredits: String
  defaultPoints: String
  description: String
  id: String!
  level: String
  name: String!
  sourcedId: String
  type: EntityType!
  updatedAt: DateTime!
}

type Competency {
  additionalProperties: String
  alternativeLabel: String
  associatedPersonnel(after: PersonWhereUniqueInput, before: PersonWhereUniqueInput, first: Int, last: Int, skip: Int): [Person!]!
  associations(after: AssociationWhereUniqueInput, before: AssociationWhereUniqueInput, first: Int, last: Int, skip: Int): [Association!]!
  bloomCategory: BloomLevel
  CFDocumentURI: String
  courses(after: CourseWhereUniqueInput, before: CourseWhereUniqueInput, first: Int, last: Int, skip: Int): [Course!]!
  createdAt: DateTime!
  defaultCredits: String
  defaultPoints: String
  description: String
  humanCodingScheme: String
  id: String!
  name: String!
  resources(after: ResourceWhereUniqueInput, before: ResourceWhereUniqueInput, first: Int, last: Int, skip: Int): [Resource!]!
  sourcedId: String
  tags(after: TagWhereUniqueInput, before: TagWhereUniqueInput, first: Int, last: Int, skip: Int): [Tag!]!
  type: EntityType!
  updatedAt: DateTime!
}

input CompetencyWhereUniqueInput {
  id: String
}

type Course {
  additionalProperties: String
  alternativeLabel: String
  associatedPersonnel(after: PersonWhereUniqueInput, before: PersonWhereUniqueInput, first: Int, last: Int, skip: Int): [Person!]!
  associations(after: AssociationWhereUniqueInput, before: AssociationWhereUniqueInput, first: Int, last: Int, skip: Int): [Association!]!
  courseCode: String!
  createdAt: DateTime!
  defaultCredits: String!
  defaultPoints: String
  description: String!
  endDate: DateTime
  id: String!
  name: String!
  sourcedId: String
  startDate: DateTime
  termsOffered: String
  type: EntityType!
  updatedAt: DateTime!
}

input CourseWhereUniqueInput {
  courseCode: String
  id: String
}

scalar DateTime

"""Indicates the type of the instructional entity."""
enum EntityType {
  Assessment
  Basic
  Certificate
  CoCurricular
  Competency
  Course
  Degree
}

type Person {
  additionalProperties: String
  address: String
  associatedCourses(after: CourseWhereUniqueInput, before: CourseWhereUniqueInput, first: Int, last: Int, skip: Int): [Course!]!
  createdAt: DateTime!
  email: String
  id: String!
  logo: String
  name: String!
  organization: String
  phone: String
  title: String
  types: [PersonType!]!
  updatedAt: DateTime!
  url: String!
}

"""Indicates type of the Person or Organization"""
enum PersonType {
  AdjunctFaculty
  CourseMentor
  Employer
  Endorser
  Evaluator
  Faculty
  Instructor
  Issuer
  Owner
  Provider
  Representative
  Teacher
  TeachingAssistant
}

input PersonWhereUniqueInput {
  email: String
  id: String
  url: String
}

type Query {
  Competencies(searchString: String): [Competency!]!
  Competency(id: ID): Competency
  Course(id: ID): Course
  courseByCourseCode(courseCode: String): Course
  Courses(searchString: String): [Course!]!
}

type Resource {
  associatedPersonnel(after: PersonWhereUniqueInput, before: PersonWhereUniqueInput, first: Int, last: Int, skip: Int): [Person!]!
  createdAt: DateTime!
  description: String!
  id: String!
  tags(after: TagWhereUniqueInput, before: TagWhereUniqueInput, first: Int, last: Int, skip: Int): [Tag!]!
  tests(after: UnitTestWhereUniqueInput, before: UnitTestWhereUniqueInput, first: Int, last: Int, skip: Int): [UnitTest!]!
  updatedAt: DateTime!
  url: String!
  videoURL: String
}

input ResourceWhereUniqueInput {
  id: String
}

type Tag {
  associatedPersonnel(after: PersonWhereUniqueInput, before: PersonWhereUniqueInput, first: Int, last: Int, skip: Int): [Person!]!
  competencies(after: CompetencyWhereUniqueInput, before: CompetencyWhereUniqueInput, first: Int, last: Int, skip: Int): [Competency!]!
  createdAt: DateTime!
  description: String!
  id: String!
  name: String!
  updatedAt: DateTime!
}

input TagWhereUniqueInput {
  id: String
}

type UnitTest {
  createdAt: DateTime!
  id: String!
  testString: String
  text: String
  title: String
  updatedAt: DateTime!
}

input UnitTestWhereUniqueInput {
  id: String
}
