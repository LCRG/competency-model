### This file was autogenerated by GraphQL Nexus
### Do not make changes to this file directly


type Association {
  additionalProperties: String
  associationType: AssociationType!
  createdAt: DateTime!
  entityId: String!
  entityType: EntityType!
  id: String!
  type: String!
  updatedAt: DateTime!
}

input AssociationFilter {
  every: AssociationWhereInput
  none: AssociationWhereInput
  some: AssociationWhereInput
}

"""Indicates the nature of association between instructional entities."""
enum AssociationType {
  ExactMatchOf
  Exemplar
  HasSkillLevel
  IsChildOf
  IsParentOf
  IsPartOf
  IsPeerOf
  IsRelatedTo
  Precedes
  ReplacedBy
}

input AssociationWhereInput {
  additionalProperties: NullableStringFilter
  AND: [AssociationWhereInput!]
  associationType: AssociationType
  certificate: CertificateWhereInput
  competency: CompetencyWhereInput
  course: CourseWhereInput
  createdAt: DateTimeFilter
  entityId: StringFilter
  entityType: EntityType
  id: StringFilter
  NOT: [AssociationWhereInput!]
  OR: [AssociationWhereInput!]
  type: StringFilter
  updatedAt: DateTimeFilter
}

"""
Indicates instructional level of the entity based on Blooms Taxonomy(revised)
"""
enum BloomLevel {
  ANALYZE
  APPLY
  CREATE
  EVALUATE
  INFO
  REMEMBER
  UNDERSTAND
}

input CertificateFilter {
  every: CertificateWhereInput
  none: CertificateWhereInput
  some: CertificateWhereInput
}

input CertificateWhereInput {
  additionalProperties: NullableStringFilter
  alternativeLabel: NullableStringFilter
  AND: [CertificateWhereInput!]
  areaOfStudy: NullableStringFilter
  associations: AssociationFilter
  createdAt: DateTimeFilter
  defaultCredits: NullableStringFilter
  defaultPoints: NullableStringFilter
  description: NullableStringFilter
  endorsements: IssuerFilter
  id: StringFilter
  issuer: IssuerWhereInput
  level: NullableStringFilter
  name: StringFilter
  NOT: [CertificateWhereInput!]
  OR: [CertificateWhereInput!]
  sourcedId: NullableStringFilter
  type: EntityType
  updatedAt: DateTimeFilter
}

type Competency {
  additionalProperties: String
  alternativeLabel: String
  associations(after: String, before: String, first: Int, last: Int, skip: Int): [Association!]!
  bloomCategory: BloomLevel
  CFDocumentURI: String
  createdAt: DateTime!
  defaultCredits: String
  defaultPoints: String
  description: String
  endorsements(after: String, before: String, first: Int, last: Int, orderBy: IssuerOrderByInput, skip: Int, where: IssuerWhereInput): [Issuer!]!
  humanCodingScheme: String
  id: String!
  issuer: Issuer!
  name: String!
  resources(after: String, before: String, first: Int, last: Int, orderBy: ResourceOrderByInput, skip: Int, where: ResourceWhereInput): [Resource!]!
  sourcedId: String
  tags(after: String, before: String, first: Int, last: Int, orderBy: TagOrderByInput, skip: Int, where: TagWhereInput): [Tag!]!
  type: EntityType!
  updatedAt: DateTime!
}

input CompetencyFilter {
  every: CompetencyWhereInput
  none: CompetencyWhereInput
  some: CompetencyWhereInput
}

input CompetencyWhereInput {
  additionalProperties: NullableStringFilter
  alternativeLabel: NullableStringFilter
  AND: [CompetencyWhereInput!]
  associations: AssociationFilter
  bloomCategory: BloomLevel
  CFDocumentURI: NullableStringFilter
  courses: CourseFilter
  createdAt: DateTimeFilter
  defaultCredits: NullableStringFilter
  defaultPoints: NullableStringFilter
  description: NullableStringFilter
  endorsements: IssuerFilter
  humanCodingScheme: NullableStringFilter
  id: StringFilter
  issuer: IssuerWhereInput
  name: StringFilter
  NOT: [CompetencyWhereInput!]
  OR: [CompetencyWhereInput!]
  resources: ResourceFilter
  sourcedId: NullableStringFilter
  tags: TagFilter
  type: EntityType
  updatedAt: DateTimeFilter
}

type ConceptualCategory {
  createdAt: DateTime!
  description: String!
  id: String!
  issuer: Issuer!
  name: String!
  updatedAt: DateTime!
}

input ConceptualCategoryFilter {
  every: ConceptualCategoryWhereInput
  none: ConceptualCategoryWhereInput
  some: ConceptualCategoryWhereInput
}

input ConceptualCategoryWhereInput {
  AND: [ConceptualCategoryWhereInput!]
  createdAt: DateTimeFilter
  description: StringFilter
  id: StringFilter
  issuer: IssuerWhereInput
  name: StringFilter
  NOT: [ConceptualCategoryWhereInput!]
  OR: [ConceptualCategoryWhereInput!]
  tags: TagFilter
  updatedAt: DateTimeFilter
}

type Course {
  additionalProperties: String
  alternativeLabel: String
  associations(after: String, before: String, first: Int, last: Int, skip: Int): [Association!]!
  courseCode: String!
  createdAt: DateTime!
  defaultCredits: String!
  defaultPoints: String
  description: String!
  endDate: DateTime
  endorsements(after: String, before: String, first: Int, last: Int, orderBy: IssuerOrderByInput, skip: Int, where: IssuerWhereInput): [Issuer!]!
  id: String!
  issuer: Issuer!
  name: String!
  sourcedId: String
  startDate: DateTime
  termsOffered: String
  type: EntityType!
  updatedAt: DateTime!
}

input CourseFilter {
  every: CourseWhereInput
  none: CourseWhereInput
  some: CourseWhereInput
}

input CourseWhereInput {
  additionalProperties: NullableStringFilter
  alternativeLabel: NullableStringFilter
  AND: [CourseWhereInput!]
  associations: AssociationFilter
  competency: CompetencyWhereInput
  courseCode: StringFilter
  createdAt: DateTimeFilter
  defaultCredits: StringFilter
  defaultPoints: NullableStringFilter
  description: StringFilter
  endDate: NullableDateTimeFilter
  endorsements: IssuerFilter
  id: StringFilter
  issuer: IssuerWhereInput
  name: StringFilter
  NOT: [CourseWhereInput!]
  OR: [CourseWhereInput!]
  sourcedId: NullableStringFilter
  startDate: NullableDateTimeFilter
  termsOffered: NullableStringFilter
  type: EntityType
  updatedAt: DateTimeFilter
}

scalar DateTime

input DateTimeFilter {
  equals: DateTime
  gt: DateTime
  gte: DateTime
  in: [DateTime!]
  lt: DateTime
  lte: DateTime
  not: DateTime
  notIn: [DateTime!]
}

"""Indicates the type of the instructional entity."""
enum EntityType {
  Assessment
  Basic
  Certificate
  CoCurricular
  Competency
  Course
  Degree
}

input IntFilter {
  equals: Int
  gt: Int
  gte: Int
  in: [Int!]
  lt: Int
  lte: Int
  not: Int
  notIn: [Int!]
}

type Issuer {
  additionalProperties: String
  address: String
  createdAt: DateTime!
  id: String!
  issuingPersonFullName: String!
  issuingPersonTitle: String!
  logo: String
  name: String!
  phone: String
  type: String!
  updatedAt: DateTime!
  url: String!
}

input IssuerFilter {
  every: IssuerWhereInput
  none: IssuerWhereInput
  some: IssuerWhereInput
}

input IssuerOrderByInput {
  additionalProperties: OrderByArg
  address: OrderByArg
  createdAt: OrderByArg
  id: OrderByArg
  issuingPersonFullName: OrderByArg
  issuingPersonTitle: OrderByArg
  logo: OrderByArg
  name: OrderByArg
  phone: OrderByArg
  type: OrderByArg
  updatedAt: OrderByArg
  url: OrderByArg
}

input IssuerWhereInput {
  additionalProperties: NullableStringFilter
  address: NullableStringFilter
  AND: [IssuerWhereInput!]
  certificate: CertificateWhereInput
  certificates: CertificateFilter
  competencies: CompetencyFilter
  competency: CompetencyWhereInput
  conceptualCategories: ConceptualCategoryFilter
  course: CourseWhereInput
  courses: CourseFilter
  createdAt: DateTimeFilter
  id: StringFilter
  issuingPersonFullName: StringFilter
  issuingPersonTitle: StringFilter
  logo: NullableStringFilter
  name: StringFilter
  NOT: [IssuerWhereInput!]
  OR: [IssuerWhereInput!]
  phone: NullableStringFilter
  resource: ResourceWhereInput
  resources: ResourceFilter
  tags: TagFilter
  type: StringFilter
  updatedAt: DateTimeFilter
  url: StringFilter
}

input NullableDateTimeFilter {
  equals: DateTime
  gt: DateTime
  gte: DateTime
  in: [DateTime!]
  lt: DateTime
  lte: DateTime
  not: DateTime
  notIn: [DateTime!]
}

input NullableStringFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  not: String
  notIn: [String!]
  startsWith: String
}

enum OrderByArg {
  asc
  desc
}

type Query {
  Competencies: [Competency!]!
  Competency(id: ID): Competency
  Course(id: ID): Course
  courseByCourseCode(courseCode: String): Course
  Courses: [Course!]!
  filterCompetencies(searchString: String): [Competency!]!
  filterCourses(searchString: String): [Course!]!
}

type Resource {
  createdAt: DateTime!
  description: String!
  endorsements(after: String, before: String, first: Int, last: Int, skip: Int): [Issuer!]!
  id: String!
  issuer: Issuer!
  tags(after: String, before: String, first: Int, last: Int, skip: Int): [Tag!]!
  updatedAt: DateTime!
  url: String!
}

input ResourceFilter {
  every: ResourceWhereInput
  none: ResourceWhereInput
  some: ResourceWhereInput
}

input ResourceOrderByInput {
  createdAt: OrderByArg
  description: OrderByArg
  id: OrderByArg
  updatedAt: OrderByArg
  url: OrderByArg
}

input ResourceWhereInput {
  AND: [ResourceWhereInput!]
  competency: CompetencyWhereInput
  createdAt: DateTimeFilter
  description: StringFilter
  endorsements: IssuerFilter
  id: StringFilter
  issuer: IssuerWhereInput
  NOT: [ResourceWhereInput!]
  OR: [ResourceWhereInput!]
  tags: TagFilter
  updatedAt: DateTimeFilter
  url: StringFilter
}

input StringFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  not: String
  notIn: [String!]
  startsWith: String
}

type Tag {
  conceptualCategory: ConceptualCategory!
  createdAt: DateTime!
  id: String!
  issuer: Issuer!
  name: String!
  orderWithinCategory: Int!
  updatedAt: DateTime!
}

input TagFilter {
  every: TagWhereInput
  none: TagWhereInput
  some: TagWhereInput
}

input TagOrderByInput {
  createdAt: OrderByArg
  id: OrderByArg
  name: OrderByArg
  orderWithinCategory: OrderByArg
  updatedAt: OrderByArg
}

input TagWhereInput {
  AND: [TagWhereInput!]
  competency: CompetencyWhereInput
  conceptualCategory: ConceptualCategoryWhereInput
  createdAt: DateTimeFilter
  id: StringFilter
  issuer: IssuerWhereInput
  name: StringFilter
  NOT: [TagWhereInput!]
  OR: [TagWhereInput!]
  orderWithinCategory: IntFilter
  resource: ResourceWhereInput
  updatedAt: DateTimeFilter
}
